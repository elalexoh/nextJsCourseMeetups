{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/deeply/Proyectos/react-turpial_curso/NextJs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  // console.debug(props);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    title: props.title,\n    description: props.description,\n    address: props.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb://localhost:27017/meetups\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find(); // console.debug(\"---\", meetups);\n\n  client.close();\n  return {\n    fallback: false,\n    // paths key have all posibles paths\n    // fallback: false, // try to generate page for new paths\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // paths: [\n    // \t{\n    // \t\tparams: {\n    // \t\t\tmeetupId: \"m1\",\n    // \t\t},\n    // \t},\n    // \t{\n    // \t\tparams: {\n    // \t\t\tmeetupId: \"m2\",\n    // \t\t},\n    // \t},\n    // ],\n\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetiup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb://localhost:27017/meetups\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  }); // console.debug(db);\n  // client.close();\n  // console.debug(meetupId);\n\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/deeply/Proyectos/react-turpial_curso/NextJs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","image","title","description","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","close","fallback","paths","map","meetup","params","meetupId","_id","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAChC;AACA,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,KADd;AAEC,IAAA,KAAK,EAAED,KAAK,CAACE,KAFd;AAGC,IAAA,WAAW,EAAEF,KAAK,CAACG,WAHpB;AAIC,IAAA,OAAO,EAAEH,KAAK,CAACI;AAJhB;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AACtC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,mCAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,EAAtB,CALsC,CAMtC;;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACNC,IAAAA,QAAQ,EAAE,KADJ;AACW;AACjB;AAEAC,IAAAA,KAAK,EAAEJ,OAAO,CAACK,GAAR,CAAaC,MAAD,KAAa;AAC/BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACG,GAAP,CAAWC,QAAX;AAAZ;AADuB,KAAb,CAAZ,CAJD,CAON;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlBM,GAAP;AAoBA;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C;AAEA,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AAEA,QAAMb,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,mCAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AAAEL,IAAAA,GAAG,EAAED;AAAP,GAA1B,CAA7B,CAT6C,CAU7C;AAEA;AAEA;;AACA,SAAO;AACNnB,IAAAA,KAAK,EAAE;AACN0B,MAAAA,UAAU,EAAEF;AADN;AADD,GAAP;AAKA;AACD,eAAezB,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n\t// console.debug(props);\n\treturn (\n\t\t<MeetupDetail\n\t\t\timage={props.image}\n\t\t\ttitle={props.title}\n\t\t\tdescription={props.description}\n\t\t\taddress={props.address}\n\t\t/>\n\t);\n};\n\nexport async function getStaticPaths() {\n\tconst client = await MongoClient.connect(\"mongodb://localhost:27017/meetups\");\n\tconst db = client.db();\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\tconst meetups = await meetupsCollection.find();\n\t// console.debug(\"---\", meetups);\n\n\tclient.close();\n\n\treturn {\n\t\tfallback: false, // paths key have all posibles paths\n\t\t// fallback: false, // try to generate page for new paths\n\n\t\tpaths: meetups.map((meetup) => ({\n\t\t\tparams: { meetupId: meetup._id.toString() },\n\t\t})),\n\t\t// paths: [\n\t\t// \t{\n\t\t// \t\tparams: {\n\t\t// \t\t\tmeetupId: \"m1\",\n\t\t// \t\t},\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\tparams: {\n\t\t// \t\t\tmeetupId: \"m2\",\n\t\t// \t\t},\n\t\t// \t},\n\t\t// ],\n\t};\n}\nexport async function getStaticProps(context) {\n\t// fetch data for a single meetiup\n\n\tconst meetupId = context.params.meetupId;\n\n\tconst client = await MongoClient.connect(\"mongodb://localhost:27017/meetups\");\n\tconst db = client.db();\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\tconst selectedMeetup = await meetupsCollection.findOne({ _id: meetupId });\n\t// console.debug(db);\n\n\t// client.close();\n\n\t// console.debug(meetupId);\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: selectedMeetup,\n\t\t},\n\t};\n}\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}